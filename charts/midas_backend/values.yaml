# Default values for midas-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/hiimluck3r/midas-backend
  pullPolicy: Always #change to IfNotPresent in production
  # Overrides the image tag whose default is latest.
  tag: "" #latest is default

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

services:
  api:
    type: ClusterIP
    port: 4000
  db:
    type: ClusterIP
    port: 3000

httproute:
  enabled: true
  host: api.novodigital.ru
  annotations: {}
    # konghq.com/strip-path: '{{ strip_path }}'
  spec:
    parentRefs: kong # Active Gateway instance

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

mongodb:
  enabled: true
  architecture: replicaset
  useStatefulSet: false
  replicaCount: 2

  containerSecurityContext:
    runAsNonRoot: false

  initdbScripts: 
    initdb.sh:
      #!/bin/bash
      function __curl() {
      read -r proto server path <<<"$(printf '%s' "${1//// }")"
      if [ "$proto" != "http:" ]; then
        printf >&2 "sorry, %s supports only http\n" "${FUNCNAME[0]}"
        return 1
      fi
      DOC=/${path// //}
      HOST=${server//:*}
      PORT=${server//*:}
      [ "${HOST}" = "${PORT}" ] && PORT=80

      exec 3<>"/dev/tcp/${HOST}/$PORT"
      printf 'GET %s HTTP/1.0\r\nHost: %s\r\n\r\n' "${DOC}" "${HOST}" >&3
      (while read -r line; do
      [ "$line" = $'\r' ] && break
      done && cat) <&3
      exec 3>&-
      }

      mkdir -p /dumps/Avito;
      declare -a DUMPS=(BaselineMatrix_1)

      echo "check if golden file exists...";

      FILE=/bitnami/mongodb/secrets/golden;

      if [ -f "$FILE" ]; then
          echo "golden file exists, skipping installation...";
      else
          for each in "${!DUMPS[@]}"
          do
            __curl http://github.com/hiimluck3r/Midas/raw/backend/mongo/dump/Avito/$each.bson > /dumps/Avito/$each.bson;
            __curl http://github.com/hiimluck3r/Midas/raw/backend/mongo/dump/Avito/$each.metadata.json > /dumps/Avito/$each.metadata.json;
          done
          echo "Initializing default database...";
          mongorestore /dumps;
          echo "Entrypoint done";
          touch $FILE;
          echo "golden file flag was created";
      fi

  auth:
    enabled: true
    rootUser: root
    rootPassword: root
    replicaSetKey: "rootyroot"

  arbiter:
    enabled: true